import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the sclass slice
const initialState = {
    sclassesList: [],
    sclassStudents: [],
    sclassDetails: [],
    subjectsList: [],
    subjectDetails: [],
    loading: false,
    subloading: false,
    error: null,
    response: null,
    getresponse: null,
};

// Create a slice for managing sclass-related state
const sclassSlice = createSlice({
    name: 'sclass',
    initialState,
    reducers: {
        // Reducer to handle the start of a request
        getRequest: (state) => {
            state.loading = true;
        },
        // Reducer to handle the start of a sub-details request
        getSubDetailsRequest: (state) => {
            state.subloading = true;
        },
        // Reducer to handle a successful request for sclasses
        getSuccess: (state, action) => {
            state.sclassesList = action.payload;
            state.loading = false;
            state.error = null;
            state.getresponse = null;
        },
        // Reducer to handle a successful request for students
        getStudentsSuccess: (state, action) => {
            state.sclassStudents = action.payload;
            state.loading = false;
            state.error = null;
            state.getresponse = null;
        },
        // Reducer to handle a successful request for subjects
        getSubjectsSuccess: (state, action) => {
            state.subjectsList = action.payload;
            state.loading = false;
            state.error = null;
            state.response = null;
        },
        // Reducer to handle a request for subjects that failed with a message
        getFailed: (state, action) => {
            state.subjectsList = [];
            state.response = action.payload;
            state.loading = false;
            state.error = null;
        },
        // Reducer to handle a request for sclasses or students that failed with a message
        getFailedTwo: (state, action) => {
            state.sclassesList = [];
            state.sclassStudents = [];
            state.getresponse = action.payload;
            state.loading = false;
            state.error = null;
        },        
        // Reducer to handle a request that resulted in an error
        getError: (state, action) => {
            state.loading = false;
            state.error = action.payload;
        },
        // Reducer to handle a successful request for sclass details
        detailsSuccess: (state, action) => {
            state.sclassDetails = action.payload;
            state.loading = false;
            state.error = null;
        },
        // Reducer to handle a successful request for subject details
        getSubDetailsSuccess: (state, action) => {
            state.subjectDetails = action.payload;
            state.subloading = false;
            state.error = null;
        },
        // Reducer to reset subjects and sclasses lists
        resetSubjects: (state) => {
            state.subjectsList = [];
            state.sclassesList = [];
        },
    },
});

// Export the action creators generated by createSlice
export const {
    getRequest,
    getSuccess,
    getFailed,
    getError,
    getStudentsSuccess,
    getSubjectsSuccess,
    detailsSuccess,
    getFailedTwo,
    resetSubjects,
    getSubDetailsSuccess,
    getSubDetailsRequest
} = sclassSlice.actions;
// Export the reducer function generated by createSlice
export const sclassReducer = sclassSlice.reducer;
